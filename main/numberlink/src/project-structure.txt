# Numberlink Puzzle - プロジェクト構成

## ディレクトリ構造
```
numberlink/
│
├── main.py                # メインエントリーポイント
├── game.py                # ゲームのメインロジック
├── menu.py                # メニュー画面の実装
├── puzzles/               # パズルデータを保存するディレクトリ
│   ├── __init__.py        # パッケージ宣言用
│   ├── puzzles.py         # パズル定義をまとめたファイル
│   └── puzzle_loader.py   # パズルの読み込みを担当
└── utils/                 # ユーティリティ機能
    ├── __init__.py        # パッケージ宣言用
    ├── colors.py          # 色の管理
    └── grid.py            # グリッド関連の共通機能
```

## ファイルの役割

### main.py
アプリケーションのメインエントリーポイントです。ゲーム全体のフローを管理し、メニュー画面とゲーム画面の切り替えを行います。

### menu.py
メニュー画面の実装です。パズル一覧の表示と選択機能を提供します。

### game.py
ナンバーリンクゲームの主要なロジックを含むファイルです。パズルの描画、ゲームプレイのルール、ユーザー入力の処理などを実装しています。

### puzzles/puzzles.py
パズルのデータ定義を管理します。各パズルのグリッドサイズや数字の配置を含みます。

### puzzles/puzzle_loader.py
パズルデータの読み込みと提供を担当します。利用可能なパズルのリストを返したり、特定のパズルをIDで取得する機能を提供します。

### utils/colors.py
色の管理を行うユーティリティです。数字に対応する色を返す関数や、色の定数を定義しています。

### utils/grid.py
グリッド関連の共通機能を提供します。グリッドの描画や、隣接チェックなどの補助関数を含みます。

## 実行方法

1. プロジェクトのルートディレクトリに上記のファイル構造を作成します
2. 必要なライブラリをインストールします：`pip install pyxel`
3. メインスクリプトを実行します：`python main.py`

## 拡張方法

### 新しいパズルの追加
`puzzles/puzzles.py`の`PUZZLES`リストに新しいパズルの定義を追加するだけで、自動的にメニューに表示されるようになります。

### 新しい機能の追加
必要に応じて、以下のようなモジュールを追加できます：
- `utils/sound.py` - 音響効果の管理
- `utils/save.py` - セーブデータの管理
- `editor.py` - パズルエディター画面の実装
